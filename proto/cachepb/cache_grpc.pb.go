// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: cache.proto

package cachepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CacheClient is the client API for Cache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CacheClient interface {
	// List cache instances
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Get a single cache details
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Create a new cache instance
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Delete a cache instance
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// Exists check if a cache instance exists
	Exists(ctx context.Context, in *ExistsRequest, opts ...grpc.CallOption) (*ExistsResponse, error)
	// Create a Candidate
	CreateCandidate(ctx context.Context, in *CreateCandidateRequest, opts ...grpc.CallOption) (*CreateCandidateResponse, error)
	// Clone a cache
	Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*CloneResponse, error)
	// modify a cache instance
	Modify(ctx context.Context, opts ...grpc.CallOption) (Cache_ModifyClient, error)
	// prune deletes
	Prune(ctx context.Context, in *PruneRequest, opts ...grpc.CallOption) (*PruneResponse, error)
	// Read value(s) from a cache instance
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (Cache_ReadClient, error)
	// GetChanges made to a candidate
	GetChanges(ctx context.Context, in *GetChangesRequest, opts ...grpc.CallOption) (Cache_GetChangesClient, error)
	// Discard changes made to a candidate
	Discard(ctx context.Context, in *DiscardRequest, opts ...grpc.CallOption) (*DiscardResponse, error)
	// Commit writes a candidate changes into the intended store
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error)
	// Clear wipes a cache
	Clear(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*ClearResponse, error)
	// Watch
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (Cache_WatchClient, error)
}

type cacheClient struct {
	cc grpc.ClientConnInterface
}

func NewCacheClient(cc grpc.ClientConnInterface) CacheClient {
	return &cacheClient{cc}
}

func (c *cacheClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/cache.proto.Cache/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/cache.proto.Cache/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/cache.proto.Cache/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/cache.proto.Cache/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Exists(ctx context.Context, in *ExistsRequest, opts ...grpc.CallOption) (*ExistsResponse, error) {
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, "/cache.proto.Cache/Exists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) CreateCandidate(ctx context.Context, in *CreateCandidateRequest, opts ...grpc.CallOption) (*CreateCandidateResponse, error) {
	out := new(CreateCandidateResponse)
	err := c.cc.Invoke(ctx, "/cache.proto.Cache/CreateCandidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*CloneResponse, error) {
	out := new(CloneResponse)
	err := c.cc.Invoke(ctx, "/cache.proto.Cache/Clone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Modify(ctx context.Context, opts ...grpc.CallOption) (Cache_ModifyClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cache_ServiceDesc.Streams[0], "/cache.proto.Cache/Modify", opts...)
	if err != nil {
		return nil, err
	}
	x := &cacheModifyClient{stream}
	return x, nil
}

type Cache_ModifyClient interface {
	Send(*ModifyRequest) error
	CloseAndRecv() (*ModifyResponse, error)
	grpc.ClientStream
}

type cacheModifyClient struct {
	grpc.ClientStream
}

func (x *cacheModifyClient) Send(m *ModifyRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cacheModifyClient) CloseAndRecv() (*ModifyResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ModifyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cacheClient) Prune(ctx context.Context, in *PruneRequest, opts ...grpc.CallOption) (*PruneResponse, error) {
	out := new(PruneResponse)
	err := c.cc.Invoke(ctx, "/cache.proto.Cache/Prune", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (Cache_ReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cache_ServiceDesc.Streams[1], "/cache.proto.Cache/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &cacheReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cache_ReadClient interface {
	Recv() (*ReadResponse, error)
	grpc.ClientStream
}

type cacheReadClient struct {
	grpc.ClientStream
}

func (x *cacheReadClient) Recv() (*ReadResponse, error) {
	m := new(ReadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cacheClient) GetChanges(ctx context.Context, in *GetChangesRequest, opts ...grpc.CallOption) (Cache_GetChangesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cache_ServiceDesc.Streams[2], "/cache.proto.Cache/GetChanges", opts...)
	if err != nil {
		return nil, err
	}
	x := &cacheGetChangesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cache_GetChangesClient interface {
	Recv() (*GetChangesResponse, error)
	grpc.ClientStream
}

type cacheGetChangesClient struct {
	grpc.ClientStream
}

func (x *cacheGetChangesClient) Recv() (*GetChangesResponse, error) {
	m := new(GetChangesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cacheClient) Discard(ctx context.Context, in *DiscardRequest, opts ...grpc.CallOption) (*DiscardResponse, error) {
	out := new(DiscardResponse)
	err := c.cc.Invoke(ctx, "/cache.proto.Cache/Discard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	out := new(CommitResponse)
	err := c.cc.Invoke(ctx, "/cache.proto.Cache/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Clear(ctx context.Context, in *ClearRequest, opts ...grpc.CallOption) (*ClearResponse, error) {
	out := new(ClearResponse)
	err := c.cc.Invoke(ctx, "/cache.proto.Cache/Clear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (Cache_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cache_ServiceDesc.Streams[3], "/cache.proto.Cache/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &cacheWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cache_WatchClient interface {
	Recv() (*WatchResponse, error)
	grpc.ClientStream
}

type cacheWatchClient struct {
	grpc.ClientStream
}

func (x *cacheWatchClient) Recv() (*WatchResponse, error) {
	m := new(WatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CacheServer is the server API for Cache service.
// All implementations must embed UnimplementedCacheServer
// for forward compatibility
type CacheServer interface {
	// List cache instances
	List(context.Context, *ListRequest) (*ListResponse, error)
	// Get a single cache details
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Create a new cache instance
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Delete a cache instance
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	// Exists check if a cache instance exists
	Exists(context.Context, *ExistsRequest) (*ExistsResponse, error)
	// Create a Candidate
	CreateCandidate(context.Context, *CreateCandidateRequest) (*CreateCandidateResponse, error)
	// Clone a cache
	Clone(context.Context, *CloneRequest) (*CloneResponse, error)
	// modify a cache instance
	Modify(Cache_ModifyServer) error
	// prune deletes
	Prune(context.Context, *PruneRequest) (*PruneResponse, error)
	// Read value(s) from a cache instance
	Read(*ReadRequest, Cache_ReadServer) error
	// GetChanges made to a candidate
	GetChanges(*GetChangesRequest, Cache_GetChangesServer) error
	// Discard changes made to a candidate
	Discard(context.Context, *DiscardRequest) (*DiscardResponse, error)
	// Commit writes a candidate changes into the intended store
	Commit(context.Context, *CommitRequest) (*CommitResponse, error)
	// Clear wipes a cache
	Clear(context.Context, *ClearRequest) (*ClearResponse, error)
	// Watch
	Watch(*WatchRequest, Cache_WatchServer) error
	mustEmbedUnimplementedCacheServer()
}

// UnimplementedCacheServer must be embedded to have forward compatible implementations.
type UnimplementedCacheServer struct {
}

func (UnimplementedCacheServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCacheServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCacheServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCacheServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCacheServer) Exists(context.Context, *ExistsRequest) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedCacheServer) CreateCandidate(context.Context, *CreateCandidateRequest) (*CreateCandidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCandidate not implemented")
}
func (UnimplementedCacheServer) Clone(context.Context, *CloneRequest) (*CloneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clone not implemented")
}
func (UnimplementedCacheServer) Modify(Cache_ModifyServer) error {
	return status.Errorf(codes.Unimplemented, "method Modify not implemented")
}
func (UnimplementedCacheServer) Prune(context.Context, *PruneRequest) (*PruneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prune not implemented")
}
func (UnimplementedCacheServer) Read(*ReadRequest, Cache_ReadServer) error {
	return status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedCacheServer) GetChanges(*GetChangesRequest, Cache_GetChangesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetChanges not implemented")
}
func (UnimplementedCacheServer) Discard(context.Context, *DiscardRequest) (*DiscardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Discard not implemented")
}
func (UnimplementedCacheServer) Commit(context.Context, *CommitRequest) (*CommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedCacheServer) Clear(context.Context, *ClearRequest) (*ClearResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clear not implemented")
}
func (UnimplementedCacheServer) Watch(*WatchRequest, Cache_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedCacheServer) mustEmbedUnimplementedCacheServer() {}

// UnsafeCacheServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CacheServer will
// result in compilation errors.
type UnsafeCacheServer interface {
	mustEmbedUnimplementedCacheServer()
}

func RegisterCacheServer(s grpc.ServiceRegistrar, srv CacheServer) {
	s.RegisterService(&Cache_ServiceDesc, srv)
}

func _Cache_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.proto.Cache/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.proto.Cache/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.proto.Cache/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.proto.Cache/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.proto.Cache/Exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Exists(ctx, req.(*ExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_CreateCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCandidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).CreateCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.proto.Cache/CreateCandidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).CreateCandidate(ctx, req.(*CreateCandidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Clone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Clone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.proto.Cache/Clone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Clone(ctx, req.(*CloneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Modify_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CacheServer).Modify(&cacheModifyServer{stream})
}

type Cache_ModifyServer interface {
	SendAndClose(*ModifyResponse) error
	Recv() (*ModifyRequest, error)
	grpc.ServerStream
}

type cacheModifyServer struct {
	grpc.ServerStream
}

func (x *cacheModifyServer) SendAndClose(m *ModifyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cacheModifyServer) Recv() (*ModifyRequest, error) {
	m := new(ModifyRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Cache_Prune_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PruneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Prune(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.proto.Cache/Prune",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Prune(ctx, req.(*PruneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CacheServer).Read(m, &cacheReadServer{stream})
}

type Cache_ReadServer interface {
	Send(*ReadResponse) error
	grpc.ServerStream
}

type cacheReadServer struct {
	grpc.ServerStream
}

func (x *cacheReadServer) Send(m *ReadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Cache_GetChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetChangesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CacheServer).GetChanges(m, &cacheGetChangesServer{stream})
}

type Cache_GetChangesServer interface {
	Send(*GetChangesResponse) error
	grpc.ServerStream
}

type cacheGetChangesServer struct {
	grpc.ServerStream
}

func (x *cacheGetChangesServer) Send(m *GetChangesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Cache_Discard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Discard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.proto.Cache/Discard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Discard(ctx, req.(*DiscardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.proto.Cache/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cache.proto.Cache/Clear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Clear(ctx, req.(*ClearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CacheServer).Watch(m, &cacheWatchServer{stream})
}

type Cache_WatchServer interface {
	Send(*WatchResponse) error
	grpc.ServerStream
}

type cacheWatchServer struct {
	grpc.ServerStream
}

func (x *cacheWatchServer) Send(m *WatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Cache_ServiceDesc is the grpc.ServiceDesc for Cache service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cache_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cache.proto.Cache",
	HandlerType: (*CacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Cache_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Cache_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Cache_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Cache_Delete_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _Cache_Exists_Handler,
		},
		{
			MethodName: "CreateCandidate",
			Handler:    _Cache_CreateCandidate_Handler,
		},
		{
			MethodName: "Clone",
			Handler:    _Cache_Clone_Handler,
		},
		{
			MethodName: "Prune",
			Handler:    _Cache_Prune_Handler,
		},
		{
			MethodName: "Discard",
			Handler:    _Cache_Discard_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _Cache_Commit_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _Cache_Clear_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Modify",
			Handler:       _Cache_Modify_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Read",
			Handler:       _Cache_Read_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetChanges",
			Handler:       _Cache_GetChanges_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Watch",
			Handler:       _Cache_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cache.proto",
}
